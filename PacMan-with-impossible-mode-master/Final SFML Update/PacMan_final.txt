#include <SFML/Graphics.hpp>
#include <iostream>
#include "SFML/Audio.hpp"
#include <string>
#include <conio.h> //for getch() function
#include <stdlib.h>
#include <cstdlib> //for rand () function
#include <ctime>
#include <windows.h>
#include <queue>
#include <sstream> //for read numbers
#include <math.h>
#include <fstream>


#define ROW 22
#define COL 42
using namespace std;
using namespace sf;

ofstream bestPlayers("bestPlayers.txt", ios::app);
ifstream IbestPlayers("bestPlayers.txt", ios::app);

///////////Declare Your Global Variables Here.
bool gameOver, winn;
int pacX, pacY, pacXX, pacYY, prevpacX, prevpacY, ghostX, ghostY, ghost1X, ghost1Y, ghost2X, ghost2Y, ghost3X, ghost3Y, Score = 0;
int random;
bool  stop_mode=false;
unsigned int lives = 5;
int score = 0, stop_score=0;
char key, character;
string name;
int level=1;

///Functions
bool game(string tailmap[23], int scoree, int speed, int level,Sound eat ,Sound fruitt,Sound life );
int solve(int srr, int scc, int rTarget, int cTarget, string grid[50], int ghost_num, bool visitedArrayyy[22][42]);
bool explore_neighbours(int ro, int co, int rTarget, int cTarget, string grid[50], int ghost_num, bool visitedArrayy[22][42]);
void standards();
void bestPlayers_input(string name);
void Best_players();
void winner();
void creators();
void Tips();
void Menuu();
string s(int n);
string ss(string n);


///BFS Variables
queue <int> Rqueue, Cqueue;
bool visitedArray[22][42], visitedArray2[22][42], visitedArray3[22][42], visitedArray4[22][42], reached_end = false;
int dr[4] = { -1, 1, 0, 0 };
int dc[4] = { 0, 0, 1, -1 };
char dir[4] = { 'u', 'd', 'r', 'l' };
int r, c, rr, cc, xr, xc;
int moved = 0;
string pppath;

//level 1
string grid1[22];
string tailmap[22] = {
"________________________________________",
"|f                                    f|",     //153 '.'
"|#.##.########## .#####.###########.##.|",//6
"|#.##. ######    .#####.########.  .##.|",//7
"|#.### ######.## .#####.########.##### |",//7
"|#*     .    .## .#####.###.  . . .$. .|",//8
"|####.###### .## . . . .###.#######.###|",//6
"|####.###### .##### .######.#######.###|",//5
"|####. .       .   . . . . . . . . .###|",//6
"|##### ###.## .##&&&&&&## .## .###.####|",//6
"|##### ###.## .#        # .## .###.####|",//4
"|#####.###.## .########## .## .###.####|",//6
"|#####.###. . . . . . . . . . .###.####|",//6
"|#####.###.## .########## .## .###.####|",//6
"| . . . . .## .   ####    .## . . .####|",//6     //level 1
"|######.######## .#### .######## .#####|",//4
"| . . . . . . . . . . . . . . . . . . f|",//4
"|#.########## #############.###.######.|",//8
"|#.##########. . .##### .  .###. .####.|",//8
"|# ##########.###.#####.###.#####.####.|",//8
"|#f . . . . . ###. . . .###.  . . . .  |",//8
"________________________________________"
};



//level 2
string grid2[22];
string tailmap2[22] = {    //level 2
"________________________________________",
"|f       ##                  ##       f|",     //160 '.'
"| .#### .## .................## .#### .|",//21
"|# * ## .## .############## .## .##   #|",//4
"|##   # .   .               .   .#   ##|",//4
"|   ..  .## .................## .  ..  |",//23
"|##  .# .## ....######## ....## .#  .##|",//12
"|#  .## .##### . ######  .##### .##  $#|",//5
"|   ### .      ..       ..      .###   |",//6
"| .#### .## ..###&&&&&&### ..## .#### .|",//8
"| .     .## ..##        ## ..## .     .|",//8
"|## .###### ..############ ..###### .##|",//6
"| # .       ..             ..       .# |",//6
"|## ..## .###### .#### .###### .## ..##|",//8
"| . .f## .###.   .#### .   .## .##f..  |",//8
"| .##### .###.############ .## .##### .|",//6
"| .      .###.             .## .      .|",//6
"|### .## .###.############ .## .## .###|",//6
"|    .## .....###      ### .   .## .   |",//7
"| .######### .### .## .### .######### .|",//6
"| .          .    .## .    .          .|",//6
"________________________________________"

};


//level 3
string grid3[22];
string tailmap3[22] =
{

"________________________________________",
"|f........#                  # .......f|",    //152 '.'
"| .##### .# .############## .# .##### .|",//6
"| .      .  .     ####      .  .      .|",//6
"| .######### .## .#### .## .######### .|",//6
"| .   *###   .## .#### .## .  ###     .|",//6
"| ### .##  # .## .    $ ## .#  ## .## .|",//6
"| .## .#  ## .############ .##  # .## .|",//4
"| .## .  ### .             .###   .## .|",//6
"| ### .##### .###&&&&&&### .##### .## .|",//4
"| .   .  ### .#          # .###   .   .|",//4
"| .#####  ## .#          # .##  ##### .|",//4
"| .    # . # .############ .#  .#     .|",//6
"|#f## .# ..  .             .  ..# .##f#|",//8
"|#.## .# ..# .############ .# ..# .## #|",//8
"|#.   .  .###     ####     ### .  .   #|",//4
"| .## .######### .#### .######### .## .|",//4
"| . . .   ###    .     .   ###.........|",//6
"|## .## .. #   ##########   #  .## .##|",//6
"|   .   .#   #  #      #  #   # .   . .|",//4
"|######...........####...........######|",//8
"________________________________________"


};


//level 4
string grid4[22];
string tailmap4[22] =
{
"________________________________________",
"|##f . .###. . .###..###. . .###. . f##|",//19     //252 '.'
"|# .#.#. # .#.#. # .. # .#.#. # .#.#. #|",//16
"|. .#.#. . .#.#. . .. . .#.#. . .#.#. .|",//18
"|.###.###.###.### ####.###.###.###.###.|",//14
"|.#$ . . . . . . . ## . . . . . . . *#.|",//18
"|.#. ##### . .####.  .####. . ##### .#.|",//10
"|.#.#### . .##### .  . #####. . ####.#.|",//16
"|. . . . ####. .  .  . .  .#### . . . .|",//15
"|.#. .#. . . . ##&&&&&&## . . . .#. .#.|",//12
"|.## ##. ### . #        # . ### .## ##.|",//6
"|.## ##. ### . ########## . ### .## ##.|",//12
"|.#. .#. . . . . ######.  . . . .#. .#.|",//11
"|. . . . ####. . . ##. .  .#### . . . .|",//18
"|.#.#### . .#####. . . #####. . ####.#.|",//16     //level 4
"|.#. ##### . .#### . .####. . ##### .#.|",//10
"|.#. . . . . . . . ## . . . . . . . .#.|",//18
"|f###.### ###.###.####.###.###.###.###f|",//14
"|. .#.#. . .#.# . . . . .#.#. . .#.#. .|",//18
"|  .#.#. # .#.# .#. . # .#.#. # .#.#. #|",//16
"|  . . .### . . ### .###. . .###. . .##|",//19
"________________________________________"
};

//level 5
string grid5[22];
string tailmap5[22] =
{
"________________________________________",
"|f . . . .###. . . ## . . .###. . . . f|",//19     //257 '.'
"|.##.####. #. #.#. ##. #.# .# .####.##.|",//16
"|.##.####. . ##.## . .##.## . .####.##.|",//18
"|. $ . . . #. #.#. . . #.#. # . . . . .|",//14
"|##.#.#. .###  . . ##.  . .###. .#.#.##|",//18
"|. .#.#. .     .########. . . . .#.#. *|",//10
"|. ##.#. .  ###.  . . . .###. . .#.## .|",//16
"|. . .#.###. . .        . . .###.#. . .|",//15
"|. ####.## . ####&&&&&&#### . ##.#### .|",//12
"|. . . .#  .####        ####.  #. . . .|",//6
"|. . . .#  . ############## .  #. . . .|",//12
"|. ####.## . . .########. . . ##.#### .|",//11
"|. . .#.###.###.  ####. .###.###.#. . .|",//18
"|. ##.#. . . # . . . .  . # . . .#.## .|",//16     //level 5
"|. .#.#. . . . .########. . . . .#.#. .|",//10
"|##.#.#. .###. . . ##.  . .###. .#.#.##|",//18
"|. . . . . # .#.#. . . #.#. # . . . . .|",//14
"|.##.####. . ##.## . .##.## . .####.##f|",//18
"|.##.####. # .#.#. ## .#.#. # .####.##.|",//16
"|f . . . .###. . . ## . . .###. . . . .|",//19
"________________________________________"
};
string grid6[22];
string impossible_grid[22]=
{
"________________________________________",
"|. . . . ####.###. .#. . .#. .# . . .#.|",     //270 '.'
"|.#####.  .# .#.#.#.###.###.########. .|",//6
"|. . .#.#####. .#.#.#. . .#. . .  . .##|",//6
"|##.###. #.##.#.#.#.#.#.###.######.#. .|",//7
"|. .#. . #.##.###.#####. .#.#. . #.###.|",//8
"|.#####.  .##. .#. .#. .###.#. ###.#. .|",//6
"|.#.#.### .# .###. .#. .#  . . #. . .#.|",//5
"|. .#. . .###.#.#.#. .#####. ###.#####.|",//6
"|.#####. . .#. .#.#.#. . .#. . #.#. .#.|",//6
"|.#. . . ####.#.###########. ###.###.#.|",//4
"|.###. . . .#.###. . . . .#. . #. .#.#.|",//6
"|.#.#####. . .## .#.#. .###. ###.###.##|",//6
"|.#.#. . . ####. .#.###. . . #. .#.#.#.|",//6
"|##.###### . . . . . .#.#.#. . #.#. .  |",//6     //level 1
"|. .  .# . . ######## #.#.#. #.####.###|",//4
"|.#.# .####. . . . . .#.###. #.#.  .#.#|",//4
"|##.# . .#. .##.#.#####. # .####.####.#|",//8
"|  .# .#####.# .#. .#. . # . . #.  . .#|",//8
"| #.##. . . .# .#####.## # .####.######|",//8
"|. .  .#####.##. . . .## # . . . . . . |",//8
"________________________________________"
};


///////////////////////(Main)///////////////////////////////
int main(){

    Menuu();

}
void Menuu()
{
    string name;
	int c = 0, clickX, clickY ;
	bool playmusic = true , win;

	sf::RenderWindow window(sf::VideoMode(1250, 800), "PACMAN");
	window.setKeyRepeatEnabled(false);
	//intro music//


	sf::Music music;
	if (!music.openFromFile("pacman sound (mp3cut.net).ogg")) {
		std::cout << "Error loading music file " << std::endl;
	}
	music.play();

	sf::Music PlayMusic;
	PlayMusic.setLoop(true);
	if (!PlayMusic.openFromFile("Main 5.0 (Instrumental) (mp3cut.net).ogg")) {
		std::cout << "Error loading music file " << std::endl;
	}

     SoundBuffer eatBuffer;
    if (!eatBuffer.loadFromFile("eat.wav"))
        cout << "didn't load eat sound" <<endl ;
       Sound eat;
       eat.setBuffer(eatBuffer);

SoundBuffer fruitBuffer;
    if (!fruitBuffer.loadFromFile("fruit.wav"))
        cout << "didn't load fruit sound" <<endl ;
     Sound fruitt;
       fruitt.setBuffer(fruitBuffer);

       SoundBuffer lifeBuffer;
    if (!lifeBuffer.loadFromFile("life.wav"))
        cout << "didn't load life sound" <<endl ;
       Sound life;
       life.setBuffer(lifeBuffer);

       SoundBuffer levelUpBuffer;
    if (!levelUpBuffer.loadFromFile("levelUp.ogg"))
        cout << "didn't load levelUp sound" <<endl ;
       Sound levelUp;
       levelUp.setBuffer(levelUpBuffer);

        SoundBuffer clickBuffer;
    if (!clickBuffer.loadFromFile("click.wav"))
        cout << "didn't load click sound" <<endl ;
       Sound click;
      click.setBuffer(clickBuffer);

	sf::Texture pTexture;
	sf::Sprite pacmanImage;
	if (!pTexture.loadFromFile("menu.jpg"))
		std::cout << "Error couldn't load first image" << std::endl;

		Vector2f targetSize2(1250, 800);
	pacmanImage.setTexture(pTexture);
                pacmanImage.setScale(
                        targetSize2.x / pacmanImage.getLocalBounds().width,
                        targetSize2.y / pacmanImage.getLocalBounds().height);

	pacmanImage.setTexture(pTexture);

	while (window.isOpen())
	{
		lives = 5;
		for (int i = 0; i < 22; i++)
		{
			grid1[i] = tailmap[i];
			grid2[i] = tailmap2[i];
			grid3[i] = tailmap3[i];
			grid4[i] = tailmap4[i];
			grid5[i] = tailmap5[i];
			grid6[i] = impossible_grid[i];
		}

		sf::Event event;
		while (window.pollEvent(event))
		{
			switch (event.type)
			{
			case sf::Event::Closed:
				window.close();
				break;


			case sf::Event::MouseButtonPressed:
				//std::cout << "Mouse button has been pressed" << std::endl;
				Vector2i mousepos = Mouse::getPosition(window);
				//std::cout << (float)mousepos.x << ' ' << (float)mousepos.y << std::endl;
				clickX = (float)mousepos.x;
				clickY = (float)mousepos.y;

				if (clickX >= 957 && clickX <= 1242 && clickY >= 47 && clickY <= 140) {
                        click.play();
					std::cout << "Play button has been pressed" << std::endl;

					//PlayMusic.play();
					if (playmusic == true) {
						PlayMusic.play();
					}
					//////////////////Level (1) ////////////////////////////
					std::cout << "Play button has been pressed" << std::endl;
					win = game(grid1, 153, 5, 1, eat , fruitt, life);
					if (win)
					{
					    levelUp.play();
						win = false;
						win = game(grid2, 160, 4, 2, eat , fruitt, life);
						if (win)
						{
						     level++;
						    levelUp.play();
							win = false;
							win = game(grid3, 152, 3, 3, eat , fruitt, life);
							if (win)
							{
							    level++;
							    levelUp.play();
								win = false;
                                win = game(grid4, 252, 3, 4, eat , fruitt, life);
                                if (win)
                                {
							         level++;
                                    levelUp.play();
                                    win = false;
                                    win = game(grid5, 257, 2, 5, eat , fruitt, life);
                                    if(win)
                                    {
									    level++;
                                        winner();
                                    }
                                }
							}
						}
					}

				}
				else if (clickX >= 957 && clickX <= 1242 && clickY >= 162 && clickY <= 250)
                {
                    win = false;
					click.play();
					std::cout << "Mission impossible button has been pressed" << std::endl;
					/////////////////////(impossilbe level)////////////////////////////
					win = game(impossible_grid,270,2,0,eat,fruitt,life);
					if (win)
                    {
                        winner();
                    }



				}
				else if (clickX >= 957 && clickX <= 1242 && clickY >= 275 && clickY <= 362)
                {
					click.play();
					std::cout << "Best Players button has been pressed" << std::endl;

					/////////////////////(Best Players)////////////////////////////

                        Best_players();
				}
				else if (clickX >= 957 && clickX <= 1242 && clickY >= 390 && clickY <= 477)
                {
					click.play();
					creators();
					std::cout << "Creators button has been pressed" << std::endl;

					/////////////////////(Creators)////////////////////////////



				}
				else if (clickX >= 957 && clickX <= 1242 && clickY >= 502 && clickY <= 590)
                {
					click.play();
					Tips();
					std::cout << "tips button has been pressed" << std::endl;
					/////////////////////(History)////////////////////////////


				}
				else if (clickX >= 957 && clickX <= 1242 && clickY >= 616 && clickY <= 703)
                {
					click.play();
					 window.close();
					std::cout << "Exit button has been pressed" << std::endl;
					/////////////////////(Exit)////////////////////////////

				}
				else if (clickX >= 48 && clickX <= 144 && clickY >= 676 && clickY <= 771)
                {
					click.play();
					std::cout << "Pause (Sound) button has been pressed" << std::endl;

					playmusic = false;

				}
				else if (clickX >= 153 && clickX <= 248 && clickY >= 676 && clickY <= 769) {
					std::cout << "PLay (Sound) button has been pressed" << std::endl;

					playmusic = true;

				}





			}
			window.clear();
			window.draw(pacmanImage);
			window.display();
		}


	}
}
void bestPlayers_input(string name)
{

        if (bestPlayers.is_open())
        {

            bestPlayers.seekp(1,ios_base::end);
            bestPlayers << name << endl;
        }
        else
        {
            cout << "file is not Open" <<endl;
        }

}



void standards()
{
	gameOver = false;
	winn = false;
	pacX = 20;
	pacY = 20;
	pacXX = 18;
	pacYY = 20;
	prevpacX = -1;
	prevpacY = -1;
	ghostX = 10;
	ghostY = 17;
	ghost1X = 10;
	ghost1Y = 19;
	ghost2X = 10;
	ghost2Y = 21;
	ghost3X = 10;
	ghost3Y = 23;
	//lives = 3;
}
struct structForThePath
{
	string path;
	string path2;
	string path3;
	string path4;
} nodePath[22][42];


bool  explore_neighbours(int ro, int co, int rTarget, int cTarget, string grid[50], int ghost_num, bool visitedArrayy[22][42])
{
	for (int i = 0; i < 4; i++)
	{
		rr = ro + dr[i];
		cc = co + dc[i];
		// else

		if ((rr < 0 || cc < 0))
			continue;
		else if ((rr >= 22 || cc >= 42))
			continue;
		else if (visitedArrayy[rr][cc] == true)
			continue;
		else if (grid[rr][cc] == '#' || grid[rr][cc] == '|' || grid[rr][cc] == '_')
			continue;
		//}


		Rqueue.push(rr);
		Cqueue.push(cc);
		visitedArrayy[rr][cc] = true;

		if (ghost_num == 1)
			nodePath[rr][cc].path = nodePath[ro][co].path + dir[i];
		else if (ghost_num == 2)
			nodePath[rr][cc].path2 = nodePath[ro][co].path2 + dir[i];
		else if (ghost_num == 3)
			nodePath[rr][cc].path3 = nodePath[ro][co].path3 + dir[i];
		else if (ghost_num == 4)
			nodePath[rr][cc].path4 = nodePath[ro][co].path4 + dir[i];

		if (rr == rTarget && cc == cTarget)
		{
			xr = rr;
			xc = cc;
			return true;
		}
	}
	return false;
}

int solve(int srr, int scc, int rTarget, int cTarget, string grid[50], int ghost_num, bool visitedArrayyy[22][42])
{
	reached_end = false;
	for (int i = 0; i < 22; i++)
	{
		for (int j = 0; j < 42; j++)
		{
			visitedArrayyy[i][j] = false;
			if (ghost_num == 1)
				nodePath[i][j].path.clear();
			else if (ghost_num == 2)
				nodePath[i][j].path2.clear();
			else if (ghost_num == 3)
				nodePath[i][j].path3.clear();
			else if (ghost_num == 4)
				nodePath[i][j].path4.clear();
		}
	}

	Rqueue.push(srr);
	Cqueue.push(scc);
	visitedArrayyy[srr][scc] = true;

	while (Rqueue.size() > 0)
	{
		r = Rqueue.front();
		c = Cqueue.front();
		Rqueue.pop();
		Cqueue.pop();

		if (r == rTarget && c == cTarget)
		{
			reached_end = true;
			xr = r;
			xc = c;

			break;
		}

		bool found = explore_neighbours(r, c, rTarget, cTarget, grid, ghost_num, visitedArrayyy);

		if (found)
		{
			reached_end = true;
			break;
		}
	}

	if (reached_end)
		return 0;

	return -1;

}

bool game(string tailmap[23], int scoree, int speed, int level,Sound eat ,Sound fruitt,Sound life  )
{
	int cnt = 0;
	score = 0;
mainn:
	standards();

	RenderWindow window(VideoMode(50 * 15, 40 * 15), "PACMAN");;
	window.setVerticalSyncEnabled(true); //game will run at the same frequency as the monitor's refresh rate

	//drawing the maze
	CircleShape dot; //dots
	dot.setRadius(4);
	dot.setFillColor(Color::White);

	CircleShape dot1; //dots for stopping
	dot1.setRadius(4);
	dot1.setFillColor(Color::Red);

	Texture b;   ///walls
	b.loadFromFile("blue.jpg");
	Sprite ball(b);
	ball.setTextureRect(IntRect(0, 0, 15, 15));



	/// drawing pacmann
	Texture PacManTex;
	PacManTex.loadFromFile("pacmansheet.png");
	Sprite PacMan(PacManTex);
	PacMan.setTextureRect(IntRect(18, 0, 15, 15));

	/// drawing ghost1
	Sprite Ghost1;
	Texture ghost1Tex;
	ghost1Tex.loadFromFile("pacmansheet.png", sf::IntRect(0, 64, 18, 15));
	Ghost1.setTexture(ghost1Tex);
	Ghost1.setScale(sf::Vector2f(0.8, 0.8));
	/// drawing ghost2
	Sprite Ghost2;
	Texture ghost2Tex;
	ghost2Tex.loadFromFile("pacmansheet.png", sf::IntRect(0, 80, 18, 15));
	Ghost2.setTexture(ghost2Tex);

	/// drawing ghost3
	Sprite Ghost3;
	Texture ghost3Tex;
	ghost3Tex.loadFromFile("pacmansheet.png", sf::IntRect(0, 96, 18, 15));
	Ghost3.setTexture(ghost3Tex);

	/// drawing ghost4
	Sprite Ghost4;
	Texture ghost4Tex;
	ghost4Tex.loadFromFile("pacmansheet.png", sf::IntRect(0, 112, 18, 15));
	Ghost4.setTexture(ghost4Tex);


	/// drawing fruits
	Sprite fruit;
	Texture fruittex;
	fruittex.loadFromFile("pacmansheet.png", IntRect(35, 50, 18, 15));
	fruit.setTexture(fruittex);


	///their positions
	Ghost1.setPosition(sf::Vector2f(ghostY * 15, ghostX * 15));
	Ghost2.setPosition(sf::Vector2f(ghost1Y * 15, ghost1X * 15));
	Ghost3.setPosition(sf::Vector2f(ghost2Y * 15, ghost2X * 15));
	Ghost4.setPosition(sf::Vector2f(ghost3Y * 15, ghost3X * 15));
	PacMan.setPosition(Vector2f((pacY * 15), (pacX * 15)));

	//for font
	Font font;
	font.loadFromFile("Bullpen3D.ttf");


	//display score
	Text Score;
	Score.setFont(font);
	Score.setString("SCORE : ");
	Score.setCharacterSize(21);
	Score.setPosition(15 * 7, 15 * 34);

	//display level
	Text Level;
	Level.setFont(font);
	Level.setString("LEVEL :");
	Level.setCharacterSize(21);
	Level.setPosition(15 * 7, 15 * 28);

    //for winning
	Text congrats;
	congrats.setFont(font);
	congrats.setString(" CONGRATS ! YOU WON ");
	congrats.setCharacterSize(40);
	congrats.setPosition(15 * 17, 15 * 30);

	//display lives
	Text Lives;
	Lives.setFont(font);
	Lives.setString("LIVES : ");
	Lives.setCharacterSize(21);
	Lives.setPosition(15 * 7, 15 * 31);








	// END GAME
	Text Gmover;
	Gmover.setFont(font);
	Gmover.setString(" OOPS ! GAME OVER ");
	Gmover.setCharacterSize(40);
	Gmover.setPosition(15 * 17, 15 * 30);


	///BFS
	int i = 0, j = 0, k = 0, r = 0;
	int targetX, targetY, target2X, target2Y;

	///GHOSTS ALGORITHM CALL
	if (level != 0)
	{
		solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
		solve(ghost1X, ghost1Y, pacY + 4, pacX, tailmap, 2, visitedArray2);
		solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
	}
	else
	{
		solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
		solve(ghost1X, ghost1Y, pacY, pacX, tailmap, 2, visitedArray2);
		solve(ghost2X, ghost2Y, pacY, pacX, tailmap, 3, visitedArray3);
		solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
	}
	cout << nodePath[pacX][pacY].path2 << endl;

	prevpacX = pacX;
	prevpacY = pacY;


	while (window.isOpen())
	{
		Event event;


		Text points;
		points.setFont(font);
		points.setString(s(score));
		points.setCharacterSize(20);
		points.setPosition(15 * 14, 15 * 34);

		Sleep(50);



		Text l;
		l.setFont(font);
		l.setString(s(lives));
		l.setCharacterSize(20);
		l.setPosition(15 * 14, 15 * 31);

        Text le;
		le.setFont(font);
		le.setString(s(level));
		le.setCharacterSize(20);
		le.setPosition(15 * 14, 15 * 28);



		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();

			if (event.type == Event::KeyPressed && event.key.code == Keyboard::Escape)
				window.close();
			if (Keyboard::isKeyPressed(Keyboard::Left) && tailmap[pacX][pacY - 1] != '#'
				&& tailmap[pacX][pacY - 1] != '|' && tailmap[pacX][pacY - 1] != '_'
				&& tailmap[pacX][pacY - 1] != '&')
			{
				cout << "left" << endl;
				prevpacX = pacX;
				prevpacY = pacY;
				moved = 1;
				pacY--;
				PacMan.move(-15, 0);
				PacMan.setTextureRect(IntRect(20, 16, 15, 15));
				i = 0; j = 0; k = 0; r = 0;
				if (level != 0)
				{

				+	solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY - 4, pacX, tailmap, 2, visitedArray2);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);

				}
				else
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY, pacX, tailmap, 2, visitedArray2);
					solve(ghost2X, ghost2Y, pacY, pacX, tailmap, 3, visitedArray3);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}


			}
			else if (Keyboard::isKeyPressed(Keyboard::Right) && tailmap[pacX][pacY + 1] != '#'
				&& tailmap[pacX][pacY + 1] != '|' && tailmap[pacX][pacY + 1] != '_'
				&& tailmap[pacX][pacY + 1] != '&')
			{

				prevpacX = pacX;
				prevpacY = pacY;
				moved = 2;
				pacY++;
				PacMan.move(15, 0);
				PacMan.setTextureRect(IntRect(18, 0, 15, 15));
				i = 0; j = 0; k = 0; r = 0;
				if (level != 0)
				{

					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY + 4, pacX, tailmap, 2, visitedArray2);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}
				else
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY, pacX, tailmap, 2, visitedArray2);
					solve(ghost2X, ghost2Y, pacY, pacX, tailmap, 3, visitedArray3);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}
				cout << nodePath[pacX][pacY].path2 << endl;

			}
			else if (Keyboard::isKeyPressed(Keyboard::Up) && tailmap[pacX - 1][pacY] != '#'
				&& tailmap[pacX - 1][pacY] != '|' && tailmap[pacX - 1][pacY] != '_'
				&& tailmap[pacX - 1][pacY] != '&')
			{

				prevpacX = pacX;
				prevpacY = pacY;
				moved = 2;
				pacX--;
				PacMan.move(0, -15);
				PacMan.setTextureRect(IntRect(20, 32, 15, 15));
				i = 0; j = 0; k = 0; r = 0;

				if (level != 0)
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY + 4, pacX, tailmap, 2, visitedArray2);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}
				else
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY, pacX, tailmap, 2, visitedArray2);
					solve(ghost2X, ghost2Y, pacY, pacX, tailmap, 3, visitedArray3);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}
				cout << nodePath[pacX][pacY + 4].path2 << endl;

			}
			else if (Keyboard::isKeyPressed(Keyboard::Down) && tailmap[pacX + 1][pacY] != '#'
				&& tailmap[pacX + 1][pacY] != '|' && tailmap[pacX + 1][pacY] != '_'
				&& tailmap[pacX + 1][pacY] != '&')
			{

				prevpacX = pacX;
				prevpacY = pacY;
				moved = 1;
				pacX++;
				PacMan.move(0, 15);
				PacMan.setTextureRect(IntRect(19, 48, 15, 15));
				i = 0; j = 0; k = 0; r = 0;
				if (level != 0)
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY - 4, pacX, tailmap, 2, visitedArray2);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);

				}
				else
				{
					solve(ghostX, ghostY, pacY, pacX, tailmap, 1, visitedArray);
					solve(ghost1X, ghost1Y, pacY, pacX, tailmap, 2, visitedArray2);
					solve(ghost2X, ghost2Y, pacY, pacX, tailmap, 3, visitedArray3);
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
				}
				cout << nodePath[pacX][pacY - 4].path2 << endl;


			}
		}

        if (level != 0)
		{
            if (cnt % speed == 0 && !stop_mode)
			{

                cnt=0;
				/// GHOST NUMBER 1 MOVEMENT
				if (nodePath[pacX][pacY].path[i] == 'u' && tailmap[ghostX - 1][ghostY] != '#'
					&& tailmap[ghostX - 1][ghostY] != '|' && tailmap[ghostX - 1][ghostY] != '_')
				{

					Ghost1.move(Vector2f(0, -15));
					ghostX--;
					i++;

				}
				else if (nodePath[pacX][pacY].path[i] == 'd' && tailmap[ghostX + 1][ghostY] != '#'
					&& tailmap[ghostX + 1][ghostY] != '|' && tailmap[ghostX + 1][ghostY] != '_')
				{

					Ghost1.move(Vector2f(0, 15));
					ghostX++;
					i++;
				}
				else if (nodePath[pacX][pacY].path[i] == 'r' && tailmap[ghostX][ghostY + 1] != '#'
					&& tailmap[ghostX][ghostY + 1] != '|' && tailmap[ghostX][ghostY + 1] != '_')
				{

					Ghost1.move(Vector2f(15, 0));
					ghostY++;
					i++;
				}
				else if (nodePath[pacX][pacY].path[i] == 'l' && tailmap[ghostX][ghostY - 1] != '#'
					&& tailmap[ghostX][ghostY - 1] != '|' && tailmap[ghostX][ghostY - 1] != '_')
				{

					Ghost1.move(Vector2f(-15, 0));
					ghostY--;
					i++;
				}

				if (moved == 1)
				{

					///GHOST NUMBER 2 MOVING
					if (nodePath[pacX][pacY - 4].path2[j] == 'u' && tailmap[ghost1X - 1][ghost1Y] != '#'
						&& tailmap[ghost1X - 1][ghost1Y] != '|' && tailmap[ghost1X - 1][ghost1Y] != '_')
					{
						Ghost2.move(Vector2f(0, -15));
						ghost1X--;
						j++;
					}
					else if (nodePath[pacX][pacY - 4].path2[j] == 'd' && tailmap[ghost1X + 1][ghost1Y] != '#'
						&& tailmap[ghost1X + 1][ghost1Y] != '|' && tailmap[ghost1X + 1][ghost1Y] != '_')
					{
						Ghost2.move(Vector2f(0, 15));
						ghost1X++;
						j++;
					}
					else if (nodePath[pacX][pacY - 4].path2[j] == 'r' && tailmap[ghost1X][ghost1Y + 1] != '#'
						&& tailmap[ghost1X][ghost1Y + 1] != '|' && tailmap[ghost1X][ghost1Y + 1] != '_')
					{
						Ghost2.move(Vector2f(15, 0));
						ghost1Y++;
						j++;

					}
					else if (nodePath[pacX][pacY - 4].path2[j] == 'l' && tailmap[ghost1X][ghost1Y - 1] != '#'
						&& tailmap[ghost1X][ghost1Y - 1] != '|' && tailmap[ghost1X][ghost1Y - 1] != '_')
					{
						Ghost2.move(Vector2f(-15, 0));
						ghost1Y--;
						j++;

					}
					///GHOST NUMBER 3 MOVEMENT

				}
				else if (moved == 2)
				{

					///GHOST NUMBER 2 MOVEMENT
					if (nodePath[pacX][pacY + 4].path2[j] == 'u' && tailmap[ghost1X - 1][ghost1Y] != '#'
						&& tailmap[ghost1X - 1][ghost1Y] != '|' && tailmap[ghost1X - 1][ghost1Y] != '_')
					{
						Ghost2.move(Vector2f(0, -15));
						ghost1X--;
						j++;
					}
					else if (nodePath[pacX][pacY + 4].path2[j] == 'd' && tailmap[ghost1X + 1][ghost1Y] != '#'
						&& tailmap[ghost1X + 1][ghost1Y] != '|' && tailmap[ghost1X + 1][ghost1Y] != '_')
					{
						Ghost2.move(Vector2f(0, 15));
						ghost1X++;
						j++;
					}
					else if (nodePath[pacX][pacY + 4].path2[j] == 'r' && tailmap[ghost1X][ghost1Y + 1] != '#'
						&& tailmap[ghost1X][ghost1Y + 1] != '|' && tailmap[ghost1X][ghost1Y + 1] != '_')
					{
						Ghost2.move(Vector2f(15, 0));
						ghost1Y++;
						j++;

					}
					else if (nodePath[pacX][pacY + 4].path2[j] == 'l' && tailmap[ghost1X][ghost1Y - 1] != '#'
						&& tailmap[ghost1X][ghost1Y - 1] != '|' && tailmap[ghost1X][ghost1Y - 1] != '_')
					{
						Ghost2.move(Vector2f(-15, 0));
						ghost1Y--;
						j++;

					}


				}


				///GHOST NUMBER 3 MONEMENT

				srand(1 + time(0));
				random = rand() % 2;


				 if (random == 0)
				{
					if (tailmap[ghost2X][ghost2Y + 1] != '#' && tailmap[ghost2X][ghost2Y + 1] != '@'
						&& tailmap[ghost2X][ghost2Y + 1] != '|' && tailmap[ghost2X][ghost2Y + 1] != '_')
					{
						ghost2Y++;
						Ghost3.move(Vector2f(15, 0));
					}
				}
				else if (random == 1)
				{
					if (tailmap[ghost2X][ghost2Y - 1] != '#' && tailmap[ghost2X][ghost2Y - 1] != '@'
						&& tailmap[ghost2X][ghost2Y - 1] != '|' && tailmap[ghost2X][ghost2Y - 1] != '_')
					{
						ghost2Y--;
						Ghost3.move(Vector2f(-15, 0));
					}
				}



				///GHOST NUMBER 4 MOVEMENT

				if (sqrt((pow((ghost3X - pacX), 2) + pow((ghost3Y - pacY), 2))) < 8)
				{
					solve(ghost3X, ghost3Y, 2, 20, tailmap, 4, visitedArray4);
					targetX = 20;
					targetY = 2;
				}
				else
				{
					solve(ghost3X, ghost3Y, pacY, pacX, tailmap, 4, visitedArray4);
					targetX = pacX;
					targetY = pacY;
				}

				if (nodePath[targetX][targetY].path4[r] == 'u' && tailmap[ghost3X - 1][ghost3Y] != '#'
					&& tailmap[ghost3X - 1][ghost3Y] != '|' && tailmap[ghost3X - 1][ghost3Y] != '_')
				{
					Ghost4.move(Vector2f(0, -15));
					ghost3X--;
					r++;
				}
				else if (nodePath[targetX][targetY].path4[r] == 'd' && tailmap[ghost3X + 1][ghost3Y] != '#'
					&& tailmap[ghost3X + 1][ghost3Y] != '|' && tailmap[ghost3X + 1][ghost3Y] != '_')
				{
					Ghost4.move(Vector2f(0, 15));
					ghost3X++;
					r++;
				}
				else if (nodePath[targetX][targetY].path4[r] == 'r' && tailmap[ghost3X][ghost3Y + 1] != '#'
					&& tailmap[ghost3X][ghost3Y + 1] != '|' && tailmap[ghost3X][ghost3Y + 1] != '_')
				{
					Ghost4.move(Vector2f(15, 0));
					ghost3Y++;
					r++;

				}
				else if (nodePath[targetX][targetY].path4[r] == 'l' && tailmap[ghost3X][ghost3Y - 1] != '#'
					&& tailmap[ghost3X][ghost3Y - 1] != '|' && tailmap[ghost3X][ghost3Y - 1] != '_')
				{
					Ghost4.move(Vector2f(-15, 0));
					ghost3Y--;
					r++;

				}
			}
		}
			else ///for the impossible level
			{
			    if(cnt % speed == 0 && !stop_mode)
                {

                    cnt=0;
                /// GHOST NUMBER 1 MOVEMENT
				if (nodePath[pacX][pacY].path[i] == 'u' && tailmap[ghostX - 1][ghostY] != '#'
					&& tailmap[ghostX - 1][ghostY] != '|' && tailmap[ghostX - 1][ghostY] != '_')
				{

					Ghost1.move(Vector2f(0, -15));
					ghostX--;
					i++;

				}
				else if (nodePath[pacX][pacY].path[i] == 'd' && tailmap[ghostX + 1][ghostY] != '#'
					&& tailmap[ghostX + 1][ghostY] != '|' && tailmap[ghostX + 1][ghostY] != '_')
				{

					Ghost1.move(Vector2f(0, 15));
					ghostX++;
					i++;
				}
				else if (nodePath[pacX][pacY].path[i] == 'r' && tailmap[ghostX][ghostY + 1] != '#'
					&& tailmap[ghostX][ghostY + 1] != '|' && tailmap[ghostX][ghostY + 1] != '_')
				{

					Ghost1.move(Vector2f(15, 0));
					ghostY++;
					i++;
				}
				else if (nodePath[pacX][pacY].path[i] == 'l' && tailmap[ghostX][ghostY - 1] != '#'
					&& tailmap[ghostX][ghostY - 1] != '|' && tailmap[ghostX][ghostY - 1] != '_')
				{
					Sleep(50);
					Ghost1.move(Vector2f(-15, 0));
					ghostY--;
					i++;
				}

				///GHOST NUMBER 2 MOVEMENT
				if (nodePath[pacX][pacY].path2[j] == 'u' && tailmap[ghost1X - 1][ghost1Y] != '#'
					&& tailmap[ghost1X - 1][ghost1Y] != '|' && tailmap[ghost1X - 1][ghost1Y] != '_')
				{
					Ghost2.move(Vector2f(0, -15));
					ghost1X--;
					j++;
				}
				else if (nodePath[pacX][pacY].path2[j] == 'd' && tailmap[ghost1X + 1][ghost1Y] != '#'
					&& tailmap[ghost1X + 1][ghost1Y] != '|' && tailmap[ghost1X + 1][ghost1Y] != '_')
				{
					Ghost2.move(Vector2f(0, 15));
					ghost1X++;
					j++;
				}
				else if (nodePath[pacX][pacY].path2[j] == 'r' && tailmap[ghost1X][ghost1Y + 1] != '#'
					&& tailmap[ghost1X][ghost1Y + 1] != '|' && tailmap[ghost1X][ghost1Y + 1] != '_')
				{
					Ghost2.move(Vector2f(15, 0));
					ghost1Y++;
					j++;

				}
				else if (nodePath[pacX][pacY].path2[j] == 'l' && tailmap[ghost1X][ghost1Y - 1] != '#'
					&& tailmap[ghost1X][ghost1Y - 1] != '|' && tailmap[ghost1X][ghost1Y - 1] != '_')
				{
					Ghost2.move(Vector2f(-15, 0));
					ghost1Y--;
					j++;

				}

				///GHOST NUMBER 4 MOVEMENT

				targetX = pacX;
				targetY = pacY;

				if (nodePath[targetX][targetY].path4[r] == 'u' && tailmap[ghost3X - 1][ghost3Y] != '#'
					&& tailmap[ghost3X - 1][ghost3Y] != '|' && tailmap[ghost3X - 1][ghost3Y] != '_')
				{
					Ghost4.move(Vector2f(0, -15));
					ghost3X--;
					r++;
				}
				else if (nodePath[targetX][targetY].path4[r] == 'd' && tailmap[ghost3X + 1][ghost3Y] != '#'
					&& tailmap[ghost3X + 1][ghost3Y] != '|' && tailmap[ghost3X + 1][ghost3Y] != '_')
				{
					Ghost4.move(Vector2f(0, 15));
					ghost3X++;
					r++;
				}
				else if (nodePath[targetX][targetY].path4[r] == 'r' && tailmap[ghost3X][ghost3Y + 1] != '#'
					&& tailmap[ghost3X][ghost3Y + 1] != '|' && tailmap[ghost3X][ghost3Y + 1] != '_')
				{
					Ghost4.move(Vector2f(15, 0));
					ghost3Y++;
					r++;

				}
				else if (nodePath[targetX][targetY].path4[r] == 'l' && tailmap[ghost3X][ghost3Y - 1] != '#'
					&& tailmap[ghost3X][ghost3Y - 1] != '|' && tailmap[ghost3X][ghost3Y - 1] != '_')
				{
					Ghost4.move(Vector2f(-15, 0));
					ghost3Y--;
					r++;

				}
			}
				///GHOST NUMBER 3 MOVEMENT
				if (nodePath[pacX][pacY].path3[k] == 'u' && tailmap[ghost2X - 1][ghost2Y] != '#'
					&& tailmap[ghost2X - 1][ghost2Y] != '|' && tailmap[ghost2X - 1][ghost2Y] != '_')
				{
					Ghost3.move(Vector2f(0, -15));
					ghost2X--;
					k++;
				}
				else if (nodePath[pacX][pacY].path3[j] == 'd' && tailmap[ghost2X + 1][ghost2Y] != '#'
					&& tailmap[ghost2X + 1][ghost2Y] != '|' && tailmap[ghost2X + 1][ghost2Y] != '_')
				{
					Ghost3.move(Vector2f(0, 15));
					ghost2X++;
					k++;
				}
				else if (nodePath[pacX][pacY].path3[k] == 'r' && tailmap[ghost2X][ghost2Y + 1] != '#'
					&& tailmap[ghost2X][ghost2Y + 1] != '|' && tailmap[ghost2X][ghost2Y + 1] != '_')
				{
					Ghost3.move(Vector2f(15, 0));
					ghost2Y++;
					k++;

				}
				else if (nodePath[pacX][pacY].path3[k] == 'l' && tailmap[ghost2X][ghost2Y - 1] != '#'
					&& tailmap[ghost2X][ghost2Y - 1] != '|' && tailmap[ghost2X][ghost2Y - 1] != '_')
				{
					Ghost3.move(Vector2f(-15, 0));
					ghost2Y--;
					k++;

				}

		}
		cnt++;
		window.clear();

        window.draw(l);
        window.draw(le);


		for (int i = 0; i < 22; i++) //for level 1
		{
			for (int j = 0; j < 42; j++)
			{
				if (tailmap[pacX][pacY] == 'f' && pacX == i && pacY == j)
				{
				    eat.play();
					tailmap[i][j] = ' ';
					stop_mode=true;
					stop_score=0;

				}
				if (tailmap[pacX][pacY] == '.' && pacX == i && pacY == j)
				{   eat.play();
					tailmap[i][j] = ' ';
					score++;
					if (stop_mode)
                    {
                        stop_score++;
                        if(stop_score > 6)
                        {
                            stop_mode=false;
                        }
                    }

				}
				if (i == pacX && j == pacY && tailmap[i][j] == '*' && score > 40
					|| i == pacX && j == pacY && tailmap[i][j] == '$'&& score > 80)
				{
				    fruitt.play();
					lives++;
				}
				if (i == pacX && j == pacY)
				{
					window.draw(PacMan);
					tailmap[i][j] = 'x';

				}
				else if (tailmap[i][j] == '#' || tailmap[i][j] == '|' || tailmap[i][j] == '_')
				{
					ball.setPosition(Vector2f(j * 15, i * 15));
					window.draw(ball);
					//win.display();
				}
				if (tailmap[i][j] == '*' && score > 40)
				{
					fruit.setPosition(Vector2f(j * 15, i * 15));
					window.draw(fruit);

				}
				if (tailmap[i][j] == '$' && score > 80)
				{
					fruit.setPosition(Vector2f(j * 15, i * 15));
					window.draw(fruit);

				}
				else if (ghostX == i && ghostY == j)
				{

					window.draw(Ghost1);

				}
				else if (ghost1X == i && ghost1Y == j)
				{

					window.draw(Ghost2);


				}
				else if (ghost2X == i && ghost2Y == j)
				{

					window.draw(Ghost3);

				}
				else if (ghost3X == i && ghost3Y == j)
				{
					window.draw(Ghost4);

				}
				else if (tailmap[i][j] == '.')
				{
					dot.setPosition(Vector2f(j * 15.1, i * 15.1));
					window.draw(dot);
				}
				 else if (tailmap[i][j] == 'f')
                {
                    ///draw anything
                    dot1.setPosition(Vector2f(j * 15.1, i * 15.1));
                    window.draw(dot1);
                }

				if (pacX == i && pacY == j && ghost2X == i && ghost2Y == j || pacX == i && pacY == j && ghost3X == i && ghost3Y == j
					|| pacX == i && pacY == j && ghost1X == i && ghost1Y == j || pacX == i && pacY == j && ghostX == i && ghostY == j)
				{
                    life.play();
					lives--;
					goto mainn;

				}



				if (lives > 0)
				{
					continue;
				}
				else if (lives == 0)
				{
					break;
				}



			}
		}


		// DRAW GAME OVER
		if (lives == 0)
		{
			sf::Music GameOverSound;
			if (!GameOverSound.openFromFile("Game Over Sound Effects All Sounds (mp3cut.net).ogg")) {
				std::cout << "Error loading music file " << std::endl;
			}
			GameOverSound.play();



			window.draw(Gmover);

		}

		//DRAW WIN
		if (score == scoree)
		{
			window.draw(congrats);
			sf::Music WinningSound;
			if (!WinningSound.openFromFile("U Win Sound (mp3cut.net).ogg")) {
				std::cout << "Error loading music file " << std::endl;
			}
			WinningSound.play();
			return true;
		}




		window.draw(Score);
		window.draw(Lives);
		window.draw(points);
		window.draw(Level);
		window.display();


	}

	return false;
}

void creators(void)
{
    //for font
	Font font;
	font.loadFromFile("DK Cool Crayon.ttf");

    // Creators
    Text cr;
    cr.setFont(font);
    cr.setString(" About Us : ");
    cr.setCharacterSize(25);
	cr.setPosition(15*4 , 15*2);

	//1
	Text cr1;
	cr1.setFont(font);
	cr1.setString("Ahmed Ayman Aabd ");
	cr1.setCharacterSize(20);
	cr1.setPosition(15*5 , 15*5);

    //2
    Text cr2;
	cr2.setFont(font);
	cr2.setString("Amany Salah Zahran");
	cr2.setCharacterSize(20);
	cr2.setPosition(15*5 , 15*8);

	//3
	Text cr3;
	cr3.setFont(font);
	cr3.setString("Sara Tarek Ahmed");
	cr3.setCharacterSize(20);
	cr3.setPosition(15*5 , 15*11);

	//4
	Text cr4;
	cr4.setFont(font);
	cr4.setString("Dalia Abd El-nasser ");
	cr4.setCharacterSize(20);
	cr4.setPosition(15*5 , 15*14);

	//5
	Text cr5;
	cr5.setFont(font);
	cr5.setString("Omar Hisham Ali");
	cr5.setCharacterSize(20);
	cr5.setPosition(15*5 , 15*17);

	//6
	Text cr6;
	cr6.setFont(font);
	cr6.setString("Hager Osama Gouda");
	cr6.setCharacterSize(20);
	cr6.setPosition(15*5 , 15*20);

    //E-mails
    //1
    Text e1;
    e1.setFont(font);
    e1.setString("a.ayman6000@gmail.com");
    e1.setCharacterSize(20);
    e1.setPosition(15*20 , 15*5);

    //2
    Text e2;
    e2.setFont(font);
    e2.setString("amaniisalah22@gmail.com");
    e2.setCharacterSize(20);
    e2.setPosition(15*20 , 15*8);

    //3
    Text e3;
    e3.setFont(font);
    e3.setString("ssaaratarek@gmail.com");
    e3.setCharacterSize(20);
    e3.setPosition(15*20 , 15*11);

    //4
    Text e4;
    e4.setFont(font);
    e4.setString("nasserdalia213@gmail.com");
    e4.setCharacterSize(20);
    e4.setPosition(15*20 , 15*14);

    //5
    Text e5;
    e5.setFont(font);
    e5.setString("Ohisham413@gmail.com");
    e5.setCharacterSize(20);
    e5.setPosition(15*20 , 15*17);

    //6
    Text e6;
    e6.setFont(font);
    e6.setString("hagerosama47@gmail.com");
    e6.setCharacterSize(20);
    e6.setPosition(15*20 , 15*20);

    //link
    Text link;
    link.setFont(font);
    link.setString("Our Link :");
    link.setCharacterSize(25);
    link.setPosition(15*4 , 15*25);

    //address
     //link
    Text add;
    add.setFont(font);
    add.setString("https://github.com/a7medayman6/PacMan-with-impossible-mode?");
    add.setCharacterSize(20);
    add.setPosition(15*1 , 15*28);

    Text add2;
    add2.setFont(font);
    add2.setString("fbclid=IwAR2ih6CG-s-TTstiLNssQ7QIE2g0Xnss9jP_-lIF5jIl3FT73-iT1o-LkOE");
    add2.setCharacterSize(20);
    add2.setPosition(15*1 , 15*30);




     RenderWindow window1(VideoMode(50 * 15, 40 * 15), "Creators");

           while (window1.isOpen())
                {

                         sf::Event event;
                       while (window1.pollEvent(event))
                      {
                         switch (event.type)
                      {
                        case sf::Event::Closed:
                            window1.close();
                            break;
                       }
                      }
                    window1.draw(cr);
					window1.draw(cr1);
					window1.draw(e1);
					window1.draw(cr2);
					window1.draw(e2);
					window1.draw(cr3);
					window1.draw(e3);
					window1.draw(cr4);
					window1.draw(e4);
					window1.draw(cr5);
					window1.draw(e5);
					window1.draw(cr6);
					window1.draw(e6);
					window1.draw(link);
					window1.draw(add);
					window1.draw(add2);
                    window1.display();

                    Sleep(1000);
                }
}

void Best_players()
{
     //for font
        Font font;
        font.loadFromFile("Bullpen3D.ttf");

        //for names
        int line=100;
		Text names;
		names.setFont(font);
		names.setCharacterSize(20);
		names.setString("");
		names.setPosition(200, line);

					 sf::RenderWindow window2(sf::VideoMode(500, 1000), "Best_Players");
                                        sf::Event eevent;
                                        while (window2.isOpen())
                                        {
                                            if (eevent.type == Event::Closed)
                                                    window2.close();

                                                if (eevent.type == Event::KeyPressed && eevent.key.code == Keyboard::Escape)
                                                    window2.close();
                                            while( IbestPlayers >> name)
                                            {

                                                names.setString(ss(name));
                                                window2.draw(names);
                                                line+=50;
                                                names.setPosition(200, line);
                                            }
                                        window2.display();
                                        Sleep(4000);
                                        break;
                                        }

}
void Tips()
{
     RenderWindow tipwindow(VideoMode(1000,700), "tips");

           while (tipwindow.isOpen())
                {

                         sf::Event tipEvent;
                       Texture tipTexture;
                       Sprite tipImage ;
                            if (!tipTexture.loadFromFile("Tips.jpg"))
                                cout << "Error couldn't load tip image" << endl;
                        tipImage.setTexture(tipTexture);
                        Vector2f targetSize(1000, 700);
                        tipImage.setScale(
                                        targetSize.x / tipImage.getLocalBounds().width,
                                        targetSize.y / tipImage.getLocalBounds().height);
                       while (tipwindow.pollEvent(tipEvent))
                      {
                         switch (tipEvent.type)
                      {
                        case sf::Event::Closed:
                            tipwindow.close();
                            break;  }
                      }
                    tipwindow.draw(tipImage);
                    tipwindow.display();

                    Sleep(1000);
                }
}
void winner()
{

    SoundBuffer levelUpBuffer;
    if (!levelUpBuffer.loadFromFile("levelUp.ogg"))
        cout << "didn't load levelUp sound" <<endl ;
       Sound levelUp;
       levelUp.setBuffer(levelUpBuffer);
                                        Font font;
                                        font.loadFromFile("Bullpen3D.ttf");


                                        //display congrats
                                        Text congrats;
                                        congrats.setFont(font);
                                        congrats.setString("YOU WON! CONGRATULATIONS. ");
                                        congrats.setCharacterSize(30);
                                        congrats.setPosition(100, 200);

                                        //display enter your name
                                        Text your_name;
                                        your_name.setFont(font);
                                        your_name.setString("        enter your name :\n You Scored The Highest Score Ever \n     Which Can't Be Displayed");
                                        your_name.setCharacterSize(20);
                                        your_name.setPosition(180, 300);


                                        sf::RenderWindow windowww(sf::VideoMode(700, 700), "congrats");
                                        sf::Event string_event;
                                            name="";
                                        while (windowww.isOpen())
                                        {
                                            levelUp.play();
                                            sf::String playerInput;
                                            sf::Text playerText;
                                            playerText.setPosition(200,400);
                                            while (windowww.pollEvent(string_event))
                                            {
                                                if (string_event.type == Event::Closed)
                                                    windowww.close();

                                                if (string_event.type == Event::KeyPressed && string_event.key.code == Keyboard::Escape)
                                                    windowww.close();

                                               if (string_event.type == sf::Event::TextEntered)
                                                {
                                                    playerInput +=string_event.text.unicode;
                                                    playerText.setString(playerInput);
                                                }


                                            }
                                        name+=playerInput;

                                        cout<<name<<endl;
                                        windowww.draw(playerText);
                                        windowww.draw(congrats);
                                        windowww.draw(your_name);
                                        windowww.display();

                                        }
                            bestPlayers_input(name);

}
// for read numbers (score , lives)
string s(int n)
{
	stringstream s;
	s << n;
	return s.str();
}
string ss(string n)
{
	stringstream s;
	s << n;
	return s.str();
}

