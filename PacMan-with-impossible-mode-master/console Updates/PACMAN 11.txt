#include <iostream>
#include <conio.h> //for getch() function
#include <stdio.h> //special for printf() function
#include <stdlib.h>
#include <cstdlib> //for rand () function
#include <ctime>
#include <windows.h>
#include <queue>
#include <string>

#define ROW 23
#define COL 31

#define KEY_RIGHT 72
#define KEY_LEFT 80
#define KEY_UP 75
#define KEY_DOWN 77
using namespace std;

///Declare Your Functions Here.
/**
void printgrid();
void logic();
void standards();
void ghost();
void ghost1();
void ghost2();
void ghost3();
**/

///Declare Your Global Variables Here.
bool gameOver,winn;
int pacX,pacY,prevpacX,prevpacY,ghostX,ghostY,ghost1X,ghost1Y,ghost2X,ghost2Y,ghost3X,ghost3Y,Score=0;
int random;
bool  level2=false, level3=false;

///BFS Variables
queue <int> visitedX, visitedY;
bool visitedArray[22][42];
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, 1, -1};
char dir[4] = {'l', 'r', 'u', 'd'};
int x,y,xx,yy;

char grid1[ROW][COL] //for Easy
=
{
"##############################",///124 '.'
"#............................#",
"#.##########################.#",
"#.#         ######        ##.#",
"#.#         ######        ##.#",
"#.##########################.#",
"#.  . . . . . . . . . . . . .#",
"#.##########################.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.##########################.#",
"#. . . . . . . . . . . . . ..#",
"#.#####. . . . . . .  .#####.#",
"#.#   ##################   #.#",
"#.#   ##################   #.#",
"#.#                        #.#",
"#.##########################.#",
"#.. . . . . . . . . . . . . .#", ///pacman at(18,40)
"##############################"};

char grid2[ROW][COL]
=
{
"##############################",///124 '.'
"#............................#",
"#.##########################.#",
"#.#         ######        ##.#",
"#.#         ######        ##.#",
"#.##########################.#",
"#.  . . . . . . . . . . . . .#",
"#.##########################.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.##########################.#",
"#. . . . . . . . . . . . . ..#",
"#.#####. . . . . . .  .#####.#",
"#.#   ##################   #.#",
"#.#   ##################   #.#",
"#.#                        #.#",
"#.##########################.#",
"#.. . . . . . . . . . . . . .#", ///pacman at(18,40)
"##############################"};

char grid3[ROW][COL]
=
{
"##############################",///124 '.'
"#............................#",
"#.##########################.#",
"#.#         ######        ##.#",
"#.#         ######        ##.#",
"#.##########################.#",
"#.  . . . . . . . . . . . . .#",
"#.##########################.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.#                        #.#",
"#.##########################.#",
"#. . . . . . . . . . . . . ..#",
"#.#####. . . . . . .  .#####.#",
"#.#   ##################   #.#",
"#.#   ##################   #.#",
"#.#                        #.#",
"#.##########################.#",
"#.. . . . . . . . . . . . . .#", ///pacman at(18,40)
"##############################"};


struct structForThePath
{
    string path;
}nodePath[ROW][COL];

void standards()
{
    gameOver=false;
    winn=false;
    pacX=19;
    pacY=20;
    prevpacX=-1;
    prevpacY=-1;
    Score=0;
    ghostX=1;
    ghostY=1;
    ghost1X=1;
    ghost1Y=28;
    ghost2X=7;
    ghost2Y=1;
    ghost3X=7;
    ghost3Y=28;
}

void printgrid(char grid[23][31]) //function for Easy grid
{
       system("cls");
        for(int i=0 ; i<ROW ; i++)
        {
            for (int j=0; j<COL; j++)
            {

                    visitedArray[i][j] = false; ///BFS Search


                if (grid[prevpacX][prevpacY]=='.' && prevpacX==i && prevpacY==j)
                {
                    grid[i][j]= ' ';
                }
                if (pacX==i && pacY==j)
                    cout << 'X';
                else if (ghostX==i && ghostY==j)
                {
                        cout<<'@';
                }
                else if (ghost1X==i && ghost1Y==j)
                {
                        cout<<'@';
                }
                else if (ghost2X==i && ghost2Y==j)
                {
                        cout<<'@';
                }
                else if (ghost3X==i && ghost3Y==j)
                {
                        cout<<'@';
                }

                else
                    cout << grid[i][j];

            }
            cout <<endl;
        }
    cout << "Score : " << Score <<endl;

};

bool neighbors (int r, int c, int targetX, int targetY, char grid[23][31])
{

        ///loop on the neighbors of the node.
    for (int i=0; i<4; i++)
    {
        xx= r + dx[i];
        yy= c + dy[i];

        if (grid [xx][yy] == '#' || grid [xx][yy] == '@' || visitedArray[xx][yy] == true)
        {
            continue;
        }

        else
        {
            visitedX.push(xx);
            visitedY.push(yy);
            visitedArray[xx][yy]=true;
            nodePath[xx][yy].path+=dir[i];
        }

    } //end loop.
}

bool findPath (int startNodeX, int startNodeY, int targetX, int targetY, char grid[23][31])
{
    visitedX.push(startNodeX);
    visitedY.push(startNodeY);
    visitedArray[startNodeX][startNodeY] = true;

        ///loop on the visited queue.
    while (!visitedX.empty() && !visitedY.empty())
    {
        x=visitedX.back();
        y=visitedY.back();
        visitedX.pop();
        visitedY.pop();

        if (x==targetX && y==targetY)
        {
            return true;
        }
        else
        {
            neighbors(x,y,targetX,targetY,grid);
        }
    } //end loop.

  return false;
}

void ghost(char grid [23][31],int& xGhost, int& yGhost, int num )
{
   // bool Wall=true;
       findPath(xGhost,yGhost,pacX,pacY,grid);


             srand(num + time(0));
             random=rand()%4;


     if (random == 0)
		{
			if(grid[xGhost + 1][yGhost] != '#' && grid[xGhost + 1][yGhost] != '@')
			 {
		     	 xGhost++;
		    	 // Wall = false;
			 }
		}

		else if (random==1)
		{

			if (grid[xGhost - 1][yGhost] != '#' && grid[xGhost - 1][yGhost] != '@')
			{
				xGhost--;
				// Wall = false;
			}
		}
		else if (random==2)
		{
			if (grid[xGhost][yGhost + 1] != '#' && grid[xGhost][yGhost + 1] != '@')
			{
				yGhost++;
				// Wall = false;
			}
		}
		else if (random==3)
		{
			if(grid[xGhost][yGhost - 1] != '#' && grid[xGhost][yGhost - 1] != '@')
			{
				yGhost--;
				// Wall = false;
			}
		}



}


int  logic(char grid [23][31])
{
        ghost(grid,ghostX,ghostY,0);
        ghost(grid,ghost1X,ghost1Y,1);
        ghost(grid,ghost2X,ghost2Y,2);
        ghost(grid,ghost3X,ghost3Y,3);
    if (pacX == ghostX && pacY == ghostY || pacX == ghost1X && pacY == ghost1Y ||
        pacX == ghost2X && pacY == ghost2Y || pacX == ghost3X && pacY == ghost3Y)
    {
        gameOver=true;
        return 0;
    }
    else
    {
        prevpacX=pacX;
        prevpacY=pacY;


    if (kbhit())
    {


        switch((_getch())) {
        case KEY_RIGHT:
            if (grid[pacX-1][pacY]!='#')
            {
                pacX--;
                if(grid[pacX-1][pacY]=='.')
                        Score++;
            }

            break;
        case KEY_LEFT:
            if (grid[pacX+1][pacY]!='#')
               {
                   pacX++;
                   if(grid[pacX+1][pacY]=='.')
                        Score++;
               }

            break;
        case KEY_UP:
            if (grid[pacX][pacY-1]!='#')
            {

                pacY--;
                if(grid[pacX][pacY-1]=='.')
                        Score++;
            }
            break;
        case KEY_DOWN:
            if (grid[pacX][pacY+1]!='#')
            {
                pacY++;
                 if(grid[pacX][pacY+1]=='.')
                        Score++;
            }
            break;
        default:

            break;
        }
    }
    }
         if (pacX == ghostX && pacY == ghostY || pacX == ghost1X && pacY == ghost1Y ||
        pacX == ghost2X && pacY == ghost2Y || pacX == ghost3X && pacY == ghost3Y)
    {
        gameOver=true;

    }
 return 0;

}

bool level (bool win)
{
    if (win)
     {
        cout<<"\n\t You Won \n" << "Your Score Is : " << Score <<endl;
        if (kbhit())
            return true;
     }
     else
     {

        cout<<"\n\tGAME OVER\n"<<endl;
        return false;
     }
}

bool game (char grid[][31])
{

        standards();
        while(!gameOver)
            {
                printgrid(grid1);
                logic(grid1);
                if (Score==116)
                {
                    return true;
                }
                Sleep(100);

            }
    system("cls");
}

int main()
{
    char key;
    string name;
    cout <<"\t\t\t\tPAC MAN\n" <<endl;
    cout << "Please Press Any Key To START.." <<endl;

    cin >> key;
    system ("cls");


    if (game(grid1))
    {

        if (level(true))
        {

            if (game(grid2))
            {

                if (level(true))
                {

                    if (game(grid3))
                    {
                        system("cls");
                        cout << "YOU WON \n\n Please Enter Your name: "<<endl;
                        cin >> name;
                        system("pause");
                        return 0;

                    }
                    else
                    {
                        level(false);
                        system("pause");
                        return 0;
                    }
                }
                else
                {
                    cout << "Thank You, We Hope You Enjoyed" <<endl;
                    system("pause");
                    return 0;
                }
            }
            else
            {
            cout << "Thank You, We Hope You Enjoyed" <<endl;
            system("pause");
            return 0;
            }
        }
    }
        else
        {
            level(false);
            system("pause");
            return 0;
        }


system("pause");
return 0;
}
